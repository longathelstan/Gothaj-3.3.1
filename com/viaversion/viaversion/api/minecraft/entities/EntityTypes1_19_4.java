package com.viaversion.viaversion.api.minecraft.entities;

import com.google.common.base.Preconditions;
import com.viaversion.viaversion.api.protocol.Protocol;
import com.viaversion.viaversion.util.EntityTypeUtil;
import java.util.Locale;
import org.checkerframework.checker.nullness.qual.Nullable;

public enum EntityTypes1_19_4 implements EntityType {
   ENTITY((EntityType)null, (String)null),
   AREA_EFFECT_CLOUD(ENTITY),
   END_CRYSTAL(ENTITY),
   EVOKER_FANGS(ENTITY),
   EXPERIENCE_ORB(ENTITY),
   EYE_OF_ENDER(ENTITY),
   FALLING_BLOCK(ENTITY),
   FIREWORK_ROCKET(ENTITY),
   ITEM(ENTITY),
   LLAMA_SPIT(ENTITY),
   TNT(ENTITY),
   SHULKER_BULLET(ENTITY),
   FISHING_BOBBER(ENTITY),
   LIVINGENTITY(ENTITY, (String)null),
   ARMOR_STAND(LIVINGENTITY),
   MARKER(ENTITY),
   PLAYER(LIVINGENTITY),
   DISPLAY(ENTITY, (String)null),
   BLOCK_DISPLAY(DISPLAY),
   ITEM_DISPLAY(DISPLAY),
   TEXT_DISPLAY(DISPLAY),
   INTERACTION(ENTITY),
   ABSTRACT_INSENTIENT(LIVINGENTITY, (String)null),
   ENDER_DRAGON(ABSTRACT_INSENTIENT),
   BEE(ABSTRACT_INSENTIENT),
   ABSTRACT_CREATURE(ABSTRACT_INSENTIENT, (String)null),
   ABSTRACT_AGEABLE(ABSTRACT_CREATURE, (String)null),
   VILLAGER(ABSTRACT_AGEABLE),
   WANDERING_TRADER(ABSTRACT_AGEABLE),
   ABSTRACT_ANIMAL(ABSTRACT_AGEABLE, (String)null),
   AXOLOTL(ABSTRACT_ANIMAL),
   DOLPHIN(ABSTRACT_INSENTIENT),
   CHICKEN(ABSTRACT_ANIMAL),
   COW(ABSTRACT_ANIMAL),
   MOOSHROOM(COW),
   PANDA(ABSTRACT_INSENTIENT),
   PIG(ABSTRACT_ANIMAL),
   POLAR_BEAR(ABSTRACT_ANIMAL),
   RABBIT(ABSTRACT_ANIMAL),
   SHEEP(ABSTRACT_ANIMAL),
   TURTLE(ABSTRACT_ANIMAL),
   FOX(ABSTRACT_ANIMAL),
   FROG(ABSTRACT_ANIMAL),
   GOAT(ABSTRACT_ANIMAL),
   SNIFFER(ABSTRACT_ANIMAL),
   ABSTRACT_TAMEABLE_ANIMAL(ABSTRACT_ANIMAL, (String)null),
   CAT(ABSTRACT_TAMEABLE_ANIMAL),
   OCELOT(ABSTRACT_TAMEABLE_ANIMAL),
   WOLF(ABSTRACT_TAMEABLE_ANIMAL),
   ABSTRACT_PARROT(ABSTRACT_TAMEABLE_ANIMAL, (String)null),
   PARROT(ABSTRACT_PARROT),
   ABSTRACT_HORSE(ABSTRACT_ANIMAL, (String)null),
   CHESTED_HORSE(ABSTRACT_HORSE, (String)null),
   DONKEY(CHESTED_HORSE),
   MULE(CHESTED_HORSE),
   LLAMA(CHESTED_HORSE),
   TRADER_LLAMA(CHESTED_HORSE),
   HORSE(ABSTRACT_HORSE),
   SKELETON_HORSE(ABSTRACT_HORSE),
   ZOMBIE_HORSE(ABSTRACT_HORSE),
   CAMEL(ABSTRACT_HORSE),
   ABSTRACT_GOLEM(ABSTRACT_CREATURE, (String)null),
   SNOW_GOLEM(ABSTRACT_GOLEM),
   IRON_GOLEM(ABSTRACT_GOLEM),
   SHULKER(ABSTRACT_GOLEM),
   ABSTRACT_FISHES(ABSTRACT_CREATURE, (String)null),
   COD(ABSTRACT_FISHES),
   PUFFERFISH(ABSTRACT_FISHES),
   SALMON(ABSTRACT_FISHES),
   TROPICAL_FISH(ABSTRACT_FISHES),
   ABSTRACT_MONSTER(ABSTRACT_CREATURE, (String)null),
   BLAZE(ABSTRACT_MONSTER),
   CREEPER(ABSTRACT_MONSTER),
   ENDERMITE(ABSTRACT_MONSTER),
   ENDERMAN(ABSTRACT_MONSTER),
   GIANT(ABSTRACT_MONSTER),
   SILVERFISH(ABSTRACT_MONSTER),
   VEX(ABSTRACT_MONSTER),
   WITCH(ABSTRACT_MONSTER),
   WITHER(ABSTRACT_MONSTER),
   RAVAGER(ABSTRACT_MONSTER),
   ABSTRACT_PIGLIN(ABSTRACT_MONSTER, (String)null),
   PIGLIN(ABSTRACT_PIGLIN),
   PIGLIN_BRUTE(ABSTRACT_PIGLIN),
   HOGLIN(ABSTRACT_ANIMAL),
   STRIDER(ABSTRACT_ANIMAL),
   TADPOLE(ABSTRACT_FISHES),
   ZOGLIN(ABSTRACT_MONSTER),
   WARDEN(ABSTRACT_MONSTER),
   ABSTRACT_ILLAGER_BASE(ABSTRACT_MONSTER, (String)null),
   ABSTRACT_EVO_ILLU_ILLAGER(ABSTRACT_ILLAGER_BASE, (String)null),
   EVOKER(ABSTRACT_EVO_ILLU_ILLAGER),
   ILLUSIONER(ABSTRACT_EVO_ILLU_ILLAGER),
   VINDICATOR(ABSTRACT_ILLAGER_BASE),
   PILLAGER(ABSTRACT_ILLAGER_BASE),
   ABSTRACT_SKELETON(ABSTRACT_MONSTER, (String)null),
   SKELETON(ABSTRACT_SKELETON),
   STRAY(ABSTRACT_SKELETON),
   WITHER_SKELETON(ABSTRACT_SKELETON),
   GUARDIAN(ABSTRACT_MONSTER),
   ELDER_GUARDIAN(GUARDIAN),
   SPIDER(ABSTRACT_MONSTER),
   CAVE_SPIDER(SPIDER),
   ZOMBIE(ABSTRACT_MONSTER),
   DROWNED(ZOMBIE),
   HUSK(ZOMBIE),
   ZOMBIFIED_PIGLIN(ZOMBIE),
   ZOMBIE_VILLAGER(ZOMBIE),
   ABSTRACT_FLYING(ABSTRACT_INSENTIENT, (String)null),
   GHAST(ABSTRACT_FLYING),
   PHANTOM(ABSTRACT_FLYING),
   ABSTRACT_AMBIENT(ABSTRACT_INSENTIENT, (String)null),
   BAT(ABSTRACT_AMBIENT),
   ALLAY(ABSTRACT_CREATURE),
   ABSTRACT_WATERMOB(ABSTRACT_INSENTIENT, (String)null),
   SQUID(ABSTRACT_WATERMOB),
   GLOW_SQUID(SQUID),
   SLIME(ABSTRACT_INSENTIENT),
   MAGMA_CUBE(SLIME),
   ABSTRACT_HANGING(ENTITY, (String)null),
   LEASH_KNOT(ABSTRACT_HANGING),
   ITEM_FRAME(ABSTRACT_HANGING),
   GLOW_ITEM_FRAME(ITEM_FRAME),
   PAINTING(ABSTRACT_HANGING),
   ABSTRACT_LIGHTNING(ENTITY, (String)null),
   LIGHTNING_BOLT(ABSTRACT_LIGHTNING),
   ABSTRACT_ARROW(ENTITY, (String)null),
   ARROW(ABSTRACT_ARROW),
   SPECTRAL_ARROW(ABSTRACT_ARROW),
   TRIDENT(ABSTRACT_ARROW),
   ABSTRACT_FIREBALL(ENTITY, (String)null),
   DRAGON_FIREBALL(ABSTRACT_FIREBALL),
   FIREBALL(ABSTRACT_FIREBALL),
   SMALL_FIREBALL(ABSTRACT_FIREBALL),
   WITHER_SKULL(ABSTRACT_FIREBALL),
   PROJECTILE_ABSTRACT(ENTITY, (String)null),
   SNOWBALL(PROJECTILE_ABSTRACT),
   ENDER_PEARL(PROJECTILE_ABSTRACT),
   EGG(PROJECTILE_ABSTRACT),
   POTION(PROJECTILE_ABSTRACT),
   EXPERIENCE_BOTTLE(PROJECTILE_ABSTRACT),
   MINECART_ABSTRACT(ENTITY, (String)null),
   CHESTED_MINECART_ABSTRACT(MINECART_ABSTRACT, (String)null),
   CHEST_MINECART(CHESTED_MINECART_ABSTRACT),
   HOPPER_MINECART(CHESTED_MINECART_ABSTRACT),
   MINECART(MINECART_ABSTRACT),
   FURNACE_MINECART(MINECART_ABSTRACT),
   COMMAND_BLOCK_MINECART(MINECART_ABSTRACT),
   TNT_MINECART(MINECART_ABSTRACT),
   SPAWNER_MINECART(MINECART_ABSTRACT),
   BOAT(ENTITY),
   CHEST_BOAT(BOAT);

   private static final EntityType[] TYPES = EntityTypeUtil.createSizedArray(values());
   private final EntityType parent;
   private final String identifier;
   private int id = -1;

   private EntityTypes1_19_4(EntityType parent) {
      this.parent = parent;
      this.identifier = "minecraft:" + this.name().toLowerCase(Locale.ROOT);
   }

   private EntityTypes1_19_4(EntityType parent, @Nullable String identifier) {
      this.parent = parent;
      this.identifier = identifier;
   }

   public int getId() {
      if (this.id == -1) {
         throw new IllegalStateException("Ids have not been initialized yet (type " + this.name() + ")");
      } else {
         return this.id;
      }
   }

   public String identifier() {
      Preconditions.checkArgument(this.identifier != null, "Called identifier method on abstract type");
      return this.identifier;
   }

   @Nullable
   public EntityType getParent() {
      return this.parent;
   }

   public boolean isAbstractType() {
      return this.identifier == null;
   }

   public static EntityType getTypeFromId(int typeId) {
      return EntityTypeUtil.getTypeFromId(TYPES, typeId, ENTITY);
   }

   public static void initialize(Protocol<?, ?, ?, ?> protocol) {
      EntityTypeUtil.initialize(values(), TYPES, protocol, (type, id) -> {
         type.id = id;
      });
   }
}
